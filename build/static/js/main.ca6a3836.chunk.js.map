{"version":3,"sources":["components/Tictactoe/Tictactoe.module.scss","components/Main/Main.module.scss","components/Timer/Timer.module.scss","components/Tictactoe/TictactoeStore.js","components/Timer/Timer.jsx","components/Tictactoe/Tictactoe.jsx","components/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","wrapper","title","table","row","cell","btn","message","cross","zero","winner","timer","TictactoeStore","_this","this","Object","classCallCheck","size","gameStarted","whoWalkNow","getNullData","data","i","j","handlerStroke","rIndex","cIndex","console","log","newData","deepClone","obj","Array","length","copy","key","hasOwnProperty","name","deadHeat","isVictory","victory","leftDiagonal","push","checkRow","rightDiagonal","verticalData","forEach","index","arr","prevElem","isWinner","found","foundR","foundH","findWinner","Timer","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","timerWasStoped","clearTimer","clearInterval","setState","time","setTimer","onChange","setInterval","state","parseInt","getTime","value","seconds","minutes","hours","concat","inherits","createClass","nextProps","nextState","stop","react","className","s","React","Tictactoe","store","timerStoped","setNullData","gameOver","getStyle","target","startNewGame","_this2","map","item","onClick","Timer_Timer","Main","apply","arguments","Tictactoe_Tictactoe","App","react_default","a","createElement","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,QAAA,2BAAAC,MAAA,yBAAAC,MAAA,yBAAAC,IAAA,uBAAAC,KAAA,wBAAAC,IAAA,uBAAAC,QAAA,2BAAAC,MAAA,yBAAAC,KAAA,wBAAAC,OAAA,mDCAlBX,EAAAC,QAAA,CAAkBC,QAAA,sBAAAC,MAAA,sCCAlBH,EAAAC,QAAA,CAAkBW,MAAA,0PCILC,EAAb,SAAAA,IAAA,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KACIG,KAAO,EADXH,KAEII,aAAc,EAFlBJ,KAGIK,WAAa,KAHjBL,KAKIM,YAAc,WACV,IAAIC,EAAO,GACX,GAAKR,EAAKI,KAAV,CACA,IAAK,IAAIK,EAAI,EAAGA,EAAIT,EAAKI,KAAMK,IAAK,CAC9BD,EAAKC,GAAK,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAKI,KAAMM,IAC7BF,EAAKC,GAAGC,GAAK,GAGnB,OAAOF,IAdfP,KAiBIU,cAAgB,SAACC,EAAQC,EAAQL,GAC7BM,QAAQC,IAAI,OAAQP,GACpB,IAAIQ,EAoML,SAASC,EAAUC,GACtB,GAAY,OAARA,GAA+B,kBAARA,EACzB,OAAOA,EAGT,GAAIA,aAAeC,OAASD,EAAIE,OAAQ,CAEtC,IADA,IAAIC,EAAO,GACFZ,EAAI,EAAGA,EAAIS,EAAIE,OAAQX,IAC9BY,EAAKZ,GAAKQ,EAAUC,EAAIT,IAE1B,OAAOY,EAGT,GAAIH,aAAehB,OAAQ,CACzB,IAAImB,EAAO,GACX,IAAK,IAAIC,KAAOJ,EACVA,EAAIK,eAAeD,KACrBD,EAAKC,GAAOL,EAAUC,EAAII,KAG9B,OAAOD,GAxNSJ,CAAUT,GAQxB,OAPKR,EAAKK,YAINL,EAAKM,WAAiC,UAApBN,EAAKM,WAAyB,OAAS,SAHzDN,EAAKK,aAAc,EACnBL,EAAKM,WAAa,SAItBU,EAAQJ,GAAQC,GAAQW,KAAOxB,EAAKM,WAC7BU,GA3Bff,KA8BIwB,SAAW,SAACjB,GACR,IAAKA,EAAKY,OAAQ,OAAO,EACzB,IAAK,IAAIX,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAE7B,IADA,IAAIlB,EAAMiB,EAAKC,GACNC,EAAI,EAAGA,EAAInB,EAAI6B,OAAQV,IAC5B,IAAKnB,EAAImB,GAAGc,KACR,OAAO,EAInB,OAAO,GAxCfvB,KA2CIyB,UAAY,SAAClB,GACT,IAAImB,GAAU,EACd,IAAKnB,EAAKY,OAAQ,OAAO,EAGzB,IADA,IAAIQ,EAAe,GACVnB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC7BmB,EAAaC,KAAKrB,EAAKC,GAAGA,IAE1BT,EAAK8B,SAASF,KAAeD,GAAU,GAI3C,IADA,IAAII,EAAgB,GACXtB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC7BsB,EAAcF,KAAKrB,EAAKA,EAAKY,OAAO,EAAEX,GAAGA,IAEzCT,EAAK8B,SAASC,KAAgBJ,GAAU,GAG5C,IAAIK,EAAe,CAAC,GAAG,GAAG,IAC1BxB,EAAKyB,QAAQ,SAAC1C,EAAK2C,GAEf,IAAK,IAAIzB,EAAI,EAAGA,EAAIlB,EAAI6B,OAAQX,IAC5BuB,EAAavB,GAAGyB,GAAS3C,EAAIkB,KAGrC,IAAK,IAAIA,EAAI,EAAGA,EAAIuB,EAAaZ,OAAQX,IACjCT,EAAK8B,SAASE,EAAavB,MAAKkB,GAAU,GAIlD,IAAK,IAAIlB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC1BT,EAAK8B,SAAStB,EAAKC,MAAKkB,GAAU,GAEzC,OAAOA,GA5Ef1B,KAiFI6B,SAAW,SAACK,GACR,IAAKA,EAAIf,OAAQ,OAAO,EACxB,IAAIgB,EAAWD,EAAI,GAAGX,KACtB,IAAKY,EAAU,OAAO,EACtB,IAAK,IAAI3B,EAAI,EAAGA,EAAI0B,EAAIf,OAAQX,IAC5B,GAAI0B,EAAI1B,GAAGe,OAASY,EAAU,OAAO,EAEzC,OAAO,GAxFfnC,KA2FIoC,SAAW,SAACzB,EAAQC,EAAQL,GACxB,IAAI6B,GAAW,EACf,IAAK7B,EAAKY,OAAQ,OAAO,EAKzB,IAFA,IAAIkB,GAAQ,EACRV,EAAe,GACVnB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IACzBG,IAAWH,GAAKI,IAAWJ,IAC3B6B,GAAQ,GAEZV,EAAaC,KAAKrB,EAAKC,GAAGA,IAE1BT,EAAK8B,SAASF,IAAiBU,IAC/BD,GAAW,GAMf,IAFA,IAAIE,GAAS,EACTR,EAAgB,GACXtB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IACzBG,IAAWJ,EAAKY,OAAO,EAAEX,GAAKI,IAAWJ,IACzC8B,GAAS,GAEbR,EAAcF,KAAKrB,EAAKA,EAAKY,OAAO,EAAEX,GAAGA,IAEzCT,EAAK8B,SAASC,IAAkBQ,IAChCF,GAAW,GAsBf,IADA,IAAIG,GAAS,EACJ/B,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC7B,GAAIT,EAAK8B,SAAStB,EAAKC,IAAK,CACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKC,GAAGW,OAAQV,IAC5BE,IAAWH,GAAKI,IAAWH,IAC3B8B,GAAS,GAGbA,IACAH,GAAW,GAKvB,OAAOA,GAzJfpC,KA4JIwC,WAAa,SAACjC,GACV,IAAIX,EAAS,KACb,IAAKW,EAAKY,OAAQ,OAAO,EAGzB,IADA,IAAIQ,EAAe,GACVnB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC7BmB,EAAaC,KAAKrB,EAAKC,GAAGA,IAE9B,GAAIT,EAAK8B,SAASF,GAEd,OADA/B,EAAS+B,EAAa,GAAGJ,KAM7B,IADA,IAAIO,EAAgB,GACXtB,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC7BsB,EAAcF,KAAKrB,EAAKA,EAAKY,OAAO,EAAEX,GAAGA,IAE7C,GAAIT,EAAK8B,SAASC,GAEd,OADAlC,EAASkC,EAAc,GAAGP,KAK9B,IAAIQ,EAAe,CAAC,GAAG,GAAG,IAC1BxB,EAAKyB,QAAQ,SAAC1C,EAAK2C,GACf,IAAK,IAAIzB,EAAI,EAAGA,EAAIlB,EAAI6B,OAAQX,IAC5BuB,EAAavB,GAAGyB,GAAS3C,EAAIkB,KAGrC,IAAK,IAAIA,EAAI,EAAGA,EAAIuB,EAAaZ,OAAQX,IACrC,GAAIT,EAAK8B,SAASE,EAAavB,IAE3B,OADAZ,EAASmC,EAAavB,GAAG,GAAGe,KAMpC,IAAK,IAAIf,EAAI,EAAGA,EAAID,EAAKY,OAAQX,IAC9B,GAAIT,EAAK8B,SAAStB,EAAKC,IAEtB,OADAZ,EAASW,EAAKC,GAAG,GAAGe,KAIxB,OAAO3B,gBClMF6C,EAAb,SAAAC,GAII,SAAAD,EAAYE,GAAO,IAAA5C,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAyC,IACf1C,EAAAE,OAAA2C,EAAA,EAAA3C,CAAAD,KAAAC,OAAA4C,EAAA,EAAA5C,CAAAwC,GAAAK,KAAA9C,KAAM2C,KAHVI,gBAAiB,EAEEhD,EAsBnBiD,WAAa,WACTC,cAAclD,EAAKF,OACnBE,EAAKmD,SAAS,CAACC,KAAM,KAxBNpD,EA2BnBqD,SAAW,WACHrD,EAAK4C,MAAMU,UAA2C,oBAAxBtD,EAAK4C,MAAMU,SACzCtD,EAAKF,MAAQyD,YAAYvD,EAAK4C,MAAMU,SAAU,KAGlDtD,EAAKF,MAAQyD,YAAY,kBAAMvD,EAAKmD,SAAS,SAACK,GAE1C,MAAO,CAACJ,KADGK,SAASD,EAAMJ,MACL,MACrB,MAnCWpD,EAsCnB0D,QAAU,SAACC,GACP,IAAIC,EAASC,EAASC,EAmBtB,OAlBAF,EAAUD,EACNA,GAAS,KAETC,EAAUD,EAAiB,IAD3BE,EAAUJ,SAASE,EAAM,MAGzBE,GAAW,KAEXA,GAA2B,IAD3BC,EAAQL,SAASI,EAAQ,MAKzBC,EACG,GAAAC,OAAMD,EAAN,KAAAC,OAAeF,EAAU,EAAIA,EAAS,IAAMA,EAA5C,KAAAE,OAAuDH,EAAU,EAAIA,EAAS,IAAMA,GAChFC,EACJ,GAAAE,OAAMF,EAAN,KAAAE,OAAiBH,EAAU,EAAIA,EAAS,IAAMA,GAE9C,GAAAG,OAAMH,IAtDb5D,EAAKwD,MAAQ,CACTJ,KAAM,GAHKpD,EAJvB,OAAAE,OAAA8D,EAAA,EAAA9D,CAAAwC,EAAAC,GAAAzC,OAAA+D,EAAA,EAAA/D,CAAAwC,EAAA,EAAApB,IAAA,oBAAAqC,MAAA,WAYQ1D,KAAKoD,aAZb,CAAA/B,IAAA,wBAAAqC,MAAA,SAe0BO,EAAWC,GAC7B,OAAID,EAAUE,MACVlB,cAAcjD,KAAKH,QACZ,KAEY,IAAnBoE,EAAUE,OAAsC,IAApBnE,KAAK2C,MAAMwB,MACvCnE,KAAKoD,YAEF,KAvBf,CAAA/B,IAAA,SAAAqC,MAAA,WAkEQ,OACIU,EAAA,qBAAKC,UAAWC,SAAhB,mCAAiCtE,KAAKyD,QAAQzD,KAAK2C,MAAMe,MAAQ1D,KAAK2C,MAAMe,MAAQ1D,KAAKuD,MAAMJ,WAnE3GV,EAAA,CAA2B8B,aCNdC,EAAb,SAAA9B,GAII,SAAA8B,EAAY7B,GAAO,IAAA5C,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAwE,IACfzE,EAAAE,OAAA2C,EAAA,EAAA3C,CAAAD,KAAAC,OAAA4C,EAAA,EAAA5C,CAAAuE,GAAA1B,KAAA9C,KAAM2C,KAJV8B,MAAQ,IAAI3E,EAGOC,EAFnB2E,aAAc,EAEK3E,EAQnB4E,YAAc,WACV5E,EAAKmD,SAAS,CAAC3C,KAAMR,EAAK0E,MAAMnE,iBATjBP,EAYnBW,cAAgB,SAACC,EAAQC,GACRb,EAAKwD,MAAMhD,KAAKI,GAAQC,GAAQW,MAEzCxB,EAAK6E,YAGT7E,EAAKmD,SAAS,SAACK,EAAOZ,GAClB,IAAIpC,EAAOgD,EAAMhD,KACjB,MAAO,CAACA,KAAMR,EAAK0E,MAAM/D,cAAcC,EAAQC,EAAQL,OApB5CR,EA4BnB8E,SAAW,SAAClE,EAAQC,GAChB,IAAIkE,EAAS/E,EAAKwD,MAAMhD,KAAKI,GAAQC,GAAQW,KAC7C,OAAKuD,EACER,IAAEQ,GADW,IA9BL/E,EAkCnB6E,SAAW,WACP,IAAIrE,EAAOR,EAAKwD,MAAMhD,KACtB,QAAIR,EAAK0E,MAAMjD,SAASjB,MAGpBR,EAAK0E,MAAMhD,UAAUlB,IAvCVR,EA2CnBgF,aAAe,WACXhF,EAAK4E,cACL5E,EAAK0E,MAAMrE,aAAc,EACzBL,EAAK0E,MAAMpE,WAAa,KACxBN,EAAKiD,cA/CUjD,EAkDnBiD,WAAa,WACTjD,EAAK2E,aAAc,EACnB3E,EAAKmD,SAAS,CAACC,KAAM,KApDNpD,EAuDnBqD,SAAW,WACPrD,EAAKmD,SAAS,SAACK,GAEX,MAAO,CAACJ,KADGK,SAASD,EAAMJ,MACL,MAxDzBpD,EAAKwD,MAAQ,CACThD,KAAM,GACN4C,KAAM,GAJKpD,EAJvB,OAAAE,OAAA8D,EAAA,EAAA9D,CAAAuE,EAAA9B,GAAAzC,OAAA+D,EAAA,EAAA/D,CAAAuE,EAAA,EAAAnD,IAAA,oBAAAqC,MAAA,WA6BQ1D,KAAK2E,gBA7Bb,CAAAtD,IAAA,SAAAqC,MAAA,WAkEa,IAAAsB,EAAAhF,KACDO,EAAOP,KAAKuD,MAAMhD,KActB,OACI6D,EAAA,qBAAKC,UAAWC,IAAEnF,SACdiF,EAAA,oBAAIC,UAAWC,IAAElF,OAAjB,yFACAgF,EAAA,qBAAKC,UAAWC,IAAEjF,OACbW,KAAKuD,MAAMhD,KAAKY,OAASnB,KAAKuD,MAAMhD,KAAK0E,IAAI,SAAC3F,EAAKqB,GAAN,OAC1CyD,EAAA,qBAAKC,UAAWC,IAAEhF,IAAK+B,IAAK,MAAQV,GAC/BrB,EAAI2F,IAAI,SAACC,EAAMtE,GAAP,OACLwD,EAAA,qBACI/C,IAAK,OAAST,EACdyD,UAAS,GAAAP,OAAKQ,IAAE/E,KAAP,KAAAuE,OAAekB,EAAKH,SAASlE,EAAQC,GAArC,KAAAkD,OAAgDkB,EAAKP,MAAMrC,SAASzB,EAAQC,EAAQoE,EAAKzB,MAAMhD,MAAQ+D,IAAE1E,OAAS,IAC3HuF,QAAS,kBAAMH,EAAKtE,cAAcC,EAAQC,WAGrD,MAETwD,EAAA,cAACgB,EAAD,CACI1B,MAAO1D,KAAKuD,MAAMJ,KAClBE,SAAUrD,KAAKoD,SACfe,KAAMnE,KAAK0E,cA/BP,WACZ,IAAI9E,EAASoF,EAAKP,MAAMjC,WAAWjC,GACnC,OAAIX,GACAoF,EAAKN,aAAc,EACZN,EAAA,mBAAGC,UAAWC,IAAE7E,SAAhB,yHACa,UAAXG,EAAqB,6CAAY,iCADnC,MAGPoF,EAAKP,MAAMjD,SAASjB,IACpByE,EAAKN,aAAc,EACbN,EAAA,mBAAGC,UAAWC,IAAE7E,SAAhB,4KAEH,KAsBFA,GACD2E,EAAA,wBAAQC,UAAWC,IAAE9E,IAAK2F,QAASnF,KAAK+E,cAAxC,gEAtGhBP,EAAA,CAA+BD,aCDlBc,EAAb,SAAA3C,GAAA,SAAA2C,IAAA,OAAApF,OAAAC,EAAA,EAAAD,CAAAD,KAAAqF,GAAApF,OAAA2C,EAAA,EAAA3C,CAAAD,KAAAC,OAAA4C,EAAA,EAAA5C,CAAAoF,GAAAC,MAAAtF,KAAAuF,YAAA,OAAAtF,OAAA8D,EAAA,EAAA9D,CAAAoF,EAAA3C,GAAAzC,OAAA+D,EAAA,EAAA/D,CAAAoF,EAAA,EAAAhE,IAAA,SAAAqC,MAAA,WAEQ,OACIU,EAAA,qBAAKC,UAAWC,IAAEnF,SACdiF,EAAA,cAACoB,EAAD,WAJhBH,EAAA,CAA0Bd,aCOXkB,MANf,WACE,OACEC,EAAAC,EAAAC,cAACC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca6a3836.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Tictactoe_wrapper__2vrMt\",\"title\":\"Tictactoe_title__PFeID\",\"table\":\"Tictactoe_table__1-AOh\",\"row\":\"Tictactoe_row__1azLT\",\"cell\":\"Tictactoe_cell__2oQK7\",\"btn\":\"Tictactoe_btn__23Qbm\",\"message\":\"Tictactoe_message__mN3Fq\",\"cross\":\"Tictactoe_cross__lF-MI\",\"zero\":\"Tictactoe_zero__GPqan\",\"winner\":\"Tictactoe_winner__S5mvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Main_wrapper__1YPAv\",\"title\":\"Main_title__3GtJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"Timer_timer__2KmgB\"};","/**\r\n * Формат для объекта крестики-нолики\r\n * [[{name: \"cross\"|\"zero\"|null, winner: boolean},{},{}],[{},{},{}],[{},{},{}]]\r\n */\r\n\r\nexport class TictactoeStore {\r\n    size = 3;\r\n    gameStarted = false;\r\n    whoWalkNow = null;\r\n\r\n    getNullData = () => {\r\n        let data = [];\r\n        if (!this.size) return;\r\n        for (let i = 0; i < this.size; i++) {\r\n              data[i] = [];\r\n            for (let j = 0; j < this.size; j++) {\r\n              data[i][j] = {};\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    handlerStroke = (rIndex, cIndex, data) => {\r\n        console.log('data', data);\r\n        let newData = deepClone(data);\r\n        if (!this.gameStarted) {\r\n            this.gameStarted = true;\r\n            this.whoWalkNow = 'cross';\r\n        } else {\r\n            this.whoWalkNow = this.whoWalkNow === 'cross' ? 'zero' : 'cross';\r\n        }\r\n        newData[rIndex][cIndex].name = this.whoWalkNow;\r\n        return newData;\r\n    }\r\n\r\n    deadHeat = (data) => {\r\n        if (!data.length) return false;\r\n        for (let i = 0; i < data.length; i++) {\r\n            let row = data[i];\r\n            for (let j = 0; j < row.length; j++) {\r\n                if (!row[j].name) {\r\n                    return false\r\n                };\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isVictory = (data) => {\r\n        let victory = false;\r\n        if (!data.length) return false;\r\n        //Заполнена диагональ слева направо\r\n        let leftDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            leftDiagonal.push(data[i][i]);\r\n        }\r\n        if (this.checkRow(leftDiagonal)) victory = true;\r\n    \r\n        // Заполнен диагональ справа налево\r\n        let rightDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            rightDiagonal.push(data[data.length-1-i][i]);\r\n        }\r\n        if (this.checkRow(rightDiagonal)) victory = true;\r\n    \r\n        // Заполнен один из рядов по вертикали\r\n        let verticalData = [[],[],[]];\r\n        data.forEach((row, index)=>{\r\n            // if (victory) return;\r\n            for (let i = 0; i < row.length; i++) {\r\n                verticalData[i][index] = row[i]\r\n            }\r\n        });\r\n        for (let i = 0; i < verticalData.length; i++) {\r\n            if (this.checkRow(verticalData[i])) victory = true;\r\n        }\r\n    \r\n        // Заполнен один из рядов по горизонтали\r\n        for (let i = 0; i < data.length; i++) {\r\n           if (this.checkRow(data[i])) victory = true;\r\n        }\r\n        return victory;\r\n    }\r\n\r\n    //Проверяем что в одномерном массиве все элементы одинаковые\r\n\r\n    checkRow = (arr) => {\r\n        if (!arr.length) return false;\r\n        let prevElem = arr[0].name;\r\n        if (!prevElem) return false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].name !== prevElem) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isWinner = (rIndex, cIndex, data) => {\r\n        let isWinner = false;\r\n        if (!data.length) return false;\r\n    \r\n        //Заполнена диагональ слева направо\r\n        let found = false;\r\n        let leftDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (rIndex === i && cIndex === i) {\r\n                found = true;\r\n            }\r\n            leftDiagonal.push(data[i][i]);\r\n        }\r\n        if (this.checkRow(leftDiagonal) && found) {\r\n            isWinner = true;\r\n        };\r\n\r\n        // Заполнен диагональ справа налево\r\n        let foundR = false;\r\n        let rightDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (rIndex === data.length-1-i && cIndex === i) {\r\n                foundR = true;\r\n            }\r\n            rightDiagonal.push(data[data.length-1-i][i]);\r\n        }\r\n        if (this.checkRow(rightDiagonal) && foundR) {\r\n            isWinner = true;\r\n        }\r\n\r\n        // Заполнен один из рядов по вертикали\r\n        // let foundV = false;\r\n        // let verticalData = [[],[],[]];\r\n        // data.forEach((row, index) => {\r\n        //     for (let i = 0; i < row.length; i++) {\r\n        //         verticalData[i][index] = row[i]\r\n        //         if (rIndex === i && cIndex === index) {\r\n        //             foundV = true\r\n        //         }\r\n        //     }\r\n        // });\r\n        // for (let i = 0; i < verticalData.length; i++) {\r\n        //     if (this.checkRow(verticalData[i]) && foundV) {\r\n        //         isWinner = true;\r\n        //     }\r\n        // }\r\n    \r\n        // Заполнен один из рядов по горизонтали\r\n        let foundH = false;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (this.checkRow(data[i])) {\r\n                for (let j = 0; j < data[i].length; j++) {\r\n                    if (rIndex === i && cIndex === j) {\r\n                        foundH = true\r\n                    }\r\n                }\r\n                if (foundH) {\r\n                    isWinner = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isWinner;\r\n    }\r\n\r\n    findWinner = (data) => {\r\n        let winner = null;\r\n        if (!data.length) return false;\r\n        //Заполнена диагональ слева направо\r\n        let leftDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            leftDiagonal.push(data[i][i]);\r\n        }\r\n        if (this.checkRow(leftDiagonal)) {\r\n            winner = leftDiagonal[0].name;\r\n            return winner;\r\n        };\r\n    \r\n        // Заполнен диагональ справа налево\r\n        let rightDiagonal = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            rightDiagonal.push(data[data.length-1-i][i]);\r\n        }\r\n        if (this.checkRow(rightDiagonal)) {\r\n            winner = rightDiagonal[0].name;\r\n            return winner;\r\n        };\r\n    \r\n        // Заполнен один из рядов по вертикали\r\n        let verticalData = [[],[],[]];\r\n        data.forEach((row, index)=>{\r\n            for (let i = 0; i < row.length; i++) {\r\n                verticalData[i][index] = row[i]\r\n            }\r\n        });\r\n        for (let i = 0; i < verticalData.length; i++) {\r\n            if (this.checkRow(verticalData[i])) {\r\n                winner = verticalData[i][0].name;\r\n                return winner;\r\n            };\r\n        }\r\n    \r\n        // Заполнен один из рядов по горизонтали\r\n        for (let i = 0; i < data.length; i++) {\r\n           if (this.checkRow(data[i])) {\r\n            winner = data[i][0].name;\r\n            return winner;\r\n           };\r\n        }\r\n        return winner;\r\n    }\r\n}\r\n\r\nfunction copyArray(arr) {\r\n    if (arr instanceof Array) {\r\n        let copy = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            copy[i] = copyArray(arr[i]);\r\n        }\r\n        return copy;\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function deepClone(obj) {\r\n    if (obj === null || typeof obj !== \"object\") {\r\n      return obj;\r\n    }\r\n  \r\n    if (obj instanceof Array && obj.length) {\r\n      let copy = [];\r\n      for (let i = 0; i < obj.length; i++) {\r\n        copy[i] = deepClone(obj[i]);\r\n      }\r\n      return copy;\r\n    }\r\n  \r\n    if (obj instanceof Object) {\r\n      let copy = {};\r\n      for (let key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          copy[key] = deepClone(obj[key]);\r\n        }\r\n      }\r\n      return copy;\r\n    }\r\n  }\r\n  ","import * as React from 'react';\r\nimport * as s from \"./Timer.module.scss\";\r\n\r\n/**\r\n * Timer - компонент отсчитывающий время в формате hh:mm:ss / mm:ss / ss\r\n * Необязательные props:\r\n * value: number - время в секундах, целое числовое значение\r\n * onChange: function - функция, которая будет вызываться с интервалом в 1 секунду\r\n * stop: boolean - если true, то вызов функции с интервалом останавливается, если false - возобновляется\r\n */\r\n\r\nexport class Timer extends React.Component {\r\n    timer;\r\n    timerWasStoped = false;\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setTimer();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextProps.stop) {\r\n            clearInterval(this.timer); \r\n            return false;\r\n        }\r\n        if (nextProps.stop === false && this.props.stop === true) {\r\n            this.setTimer();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    clearTimer = () => {\r\n        clearInterval(this.timer);\r\n        this.setState({time: 0})\r\n    } \r\n\r\n    setTimer = () => {\r\n        if (this.props.onChange && typeof this.props.onChange === \"function\") {\r\n            this.timer = setInterval(this.props.onChange, 1000);\r\n            return;\r\n        }\r\n        this.timer = setInterval(() => this.setState((state) => {\r\n            let time = parseInt(state.time);\r\n            return {time: time + 1}\r\n        }), 1000)\r\n    }\r\n\r\n    getTime = (value) => {\r\n        let seconds, minutes, hours;\r\n        seconds = value;\r\n        if (value >= 60) {\r\n            minutes = parseInt(value/60);\r\n            seconds = value - (minutes*60);\r\n        }\r\n        if (minutes >= 60) {\r\n            hours = parseInt(minutes/60);\r\n            minutes = minutes - (hours*60);\r\n        }\r\n        \r\n        let str;\r\n        if (hours) {\r\n            str = `${hours}:${minutes > 9 ? minutes: '0' + minutes}:${seconds > 9 ? seconds: '0' + seconds}`\r\n        } else if (minutes) {\r\n            str = `${minutes}:${seconds > 9 ? seconds: '0' + seconds}`\r\n        } else {\r\n            str = `${seconds}`\r\n        }\r\n        return str;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.timer}>Время: {this.getTime(this.props.value ? this.props.value : this.state.time)}</div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport s from './Tictactoe.module.scss';\r\nimport { TictactoeStore } from './TictactoeStore';\r\nimport {Timer} from \"../Timer/Timer\";\r\n\r\nexport class Tictactoe extends React.Component {\r\n    store = new TictactoeStore();\r\n    timerStoped = false;\r\n     \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            time: 0,\r\n        }\r\n    }\r\n\r\n    setNullData = () => {\r\n        this.setState({data: this.store.getNullData()})\r\n    }\r\n\r\n    handlerStroke = (rIndex, cIndex) => {\r\n        let target = this.state.data[rIndex][cIndex].name;\r\n        if (target) return;\r\n        if (this.gameOver()) {\r\n            return;\r\n        }\r\n        this.setState((state, props) => {\r\n            let data = state.data;\r\n            return {data: this.store.handlerStroke(rIndex, cIndex, data)}\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setNullData();\r\n    }\r\n\r\n    getStyle = (rIndex, cIndex) => {\r\n        let target = this.state.data[rIndex][cIndex].name;\r\n        if (!target) return \"\";\r\n        return s[target];\r\n    }\r\n\r\n    gameOver = () => {\r\n        let data = this.state.data;\r\n        if (this.store.deadHeat(data)) {\r\n            return true;\r\n        }\r\n        if (this.store.isVictory(data)) return true;\r\n        return false; \r\n    }\r\n\r\n    startNewGame = () => {\r\n        this.setNullData();\r\n        this.store.gameStarted = false;\r\n        this.store.whoWalkNow = null;\r\n        this.clearTimer();\r\n    }\r\n\r\n    clearTimer = () => {\r\n        this.timerStoped = false;\r\n        this.setState({time: 0})\r\n    } \r\n\r\n    setTimer = () => {\r\n        this.setState((state) => {\r\n            let time = parseInt(state.time);\r\n            return {time: time + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let data = this.state.data;\r\n        const message = () => {\r\n            let winner = this.store.findWinner(data);\r\n            if (winner) {\r\n                this.timerStoped = true;\r\n                return <p className={s.message}>Игра окончена! \r\n                Победил {winner === 'cross' ? 'крестик' : 'нолик'}!</p>\r\n             }\r\n            if (this.store.deadHeat(data)) {\r\n                this.timerStoped = true;\r\n               return <p className={s.message}>Игра окончена! Закончились ходы.</p>\r\n            }\r\n            return null;\r\n        }\r\n        return (\r\n            <div className={s.wrapper}>\r\n                <h1 className={s.title}>Крестики-нолики</h1>\r\n                <div className={s.table}>\r\n                    {this.state.data.length ? this.state.data.map((row, rIndex)=>(\r\n                        <div className={s.row} key={'row' + rIndex}>\r\n                            {row.map((item, cIndex) => (\r\n                                <div \r\n                                    key={'cell' + cIndex} \r\n                                    className={`${s.cell} ${this.getStyle(rIndex, cIndex)} ${this.store.isWinner(rIndex, cIndex, this.state.data) ? s.winner : \"\"}`} \r\n                                    onClick={() => this.handlerStroke(rIndex, cIndex)}/>\r\n                            ))}\r\n                        </div>\r\n                    )) : null}\r\n                </div>\r\n                <Timer \r\n                    value={this.state.time} \r\n                    onChange={this.setTimer}\r\n                    stop={this.timerStoped}\r\n                 />\r\n                {message()}\r\n                <button className={s.btn} onClick={this.startNewGame}>Новая игра</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport s from './Main.module.scss';\r\nimport {Tictactoe} from '../Tictactoe/Tictactoe';\r\n\r\nexport class Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={s.wrapper}>\r\n                <Tictactoe />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Main} from './components/Main/Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}